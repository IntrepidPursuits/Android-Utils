apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

ext.localProperties = new Properties()
ext.localProperties.load(project.rootProject.file('local.properties').newDataInputStream())

ext.getLocalProperty = { propertyName ->
    def property = localProperties.getProperty(propertyName)
    return property == null ? "" : property
}

def getArtifactPath() {
    return project.buildDir.absolutePath + "/outputs/aar/" + project.archivesBaseName + "-release.aar"
}

configurations {
    javadocDeps
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from android.sourceSets.main.java.srcDirs
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task androidReleaseJar(type: Jar, dependsOn: 'assembleRelease') {
    from android.sourceSets.main.java.srcDirs
    exclude '**/BuildConfig.class'
    exclude '**/R.class'
    exclude '**/R$*.class'
}

publish.dependsOn 'assembleRelease'

publishing {

    publications {
        mavenLibrary(MavenPublication) {
            groupId 'io.intrepid.commonutils'
            artifactId project.name
            version android.defaultConfig.versionName

            artifact(androidSourcesJar)
            artifact(androidJavadocsJar)
            //artifact(androidReleaseJar)
            artifact(getArtifactPath())

            // The publication doesn't know about our dependencies since we can't use `from component java`,
            // so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }

                asNode().children().last() + {
                    resolveStrategy = DELEGATE_FIRST
                    name 'android-utils'
                    description 'A collection of common Android utility methods used by Intrepid Pursuits.'
                    url 'https://github.com/IntrepidPursuits/android-utils'
                    scm {
                        url 'https://github.com/IntrepidPursuits/android-utils'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            name 'Intrepid Pursuits'
                            email 'it.admin+bintray@intrepid.io'
                        }
                    }
                }
            }
        }
    }
}

bintray {
    user = getLocalProperty("bintray_user")
    key = getLocalProperty("bintray_key")
    pkg {
        repo = 'maven'
        name = 'android-utils'

        version {
            name = android.defaultConfig.versionName
            released = new Date()

            gpg {
                sign = true
                passphrase = getLocalProperty("bintray_gpg_passphrase")
            }

            mavenCentralSync {
                sync = true
                user = getLocalProperty("sonatype_user")
                password = getLocalProperty("sonatype_password")
            }
        }
    }

    publications = ['mavenLibrary']
}
